[{"path":"https://visionlabels.github.io/jspsychread/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Jiri Lukavsky Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://visionlabels.github.io/jspsychread/articles/jspsychread.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"jspsychread","text":"Many people use jsPsych JavaScript framework run online experiments. Regardless whether store results locally dedicated server (e.g., JATOS), end results stored JSON format. Although possible work JSON files R, jspsych package provides simplified interface smooth import subsequent data manipulations. package help covert JSON file tibble format used dplyr many packages tidyverse.","code":""},{"path":"https://visionlabels.github.io/jspsychread/articles/jspsychread.html","id":"example-data","dir":"Articles","previous_headings":"Getting started","what":"Example data","title":"jspsychread","text":"Let’s imagine collected data one person simple reaction time experiment. can try experiment jsPsych tutorial. First, let’s look data. can import content R read_jspsych command get following tibble. can see , tibble contains 6 columns. record column different number experiment stored file. always 1 local JSON file (good idea change import) increasing row integers (1, 2, ...) reading data JATOS server (specify additional parameter single = F). next four columns trial_type, trial_index, time_elapsed internal_node_id compulsory data stored every plugin/trial jsPsych experiment. use trial_type distinguish experiment trials stuff (e.g., instructions). values trial_index can also handy, want work particular subset trials (training vs experiment, block 1 vs 2). Durations trial milliseconds stored time_elapsed may useful indicator long waiting times (even don’t collect response time particular trial plugin). text stored internal_node_id refers hierarchical structure experiment. Although mentioned columns might already interest, really interesting information stored list final column called raw.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tidyr) # or library(tidyverse) library(jspsychread)  # example file included in the package filename <- demo_file(\"demo-simple-rt-task.json\") readLines(filename, n = 12) %>% cat(sep = \"\\n\") #> [ #>  { #>      \"success\": true, #>      \"timeout\": false, #>      \"failed_images\": [], #>      \"failed_audio\": [], #>      \"failed_video\": [], #>      \"trial_type\": \"preload\", #>      \"trial_index\": 0, #>      \"time_elapsed\": 3, #>      \"internal_node_id\": \"0.0-0.0\" #>  }, d <- read_jspsych(filename)  d #> # A tibble: 24 × 6 #>    record trial_type              trial_index time_elapsed intern…¹ raw          #>     <dbl> <chr>                         <int>        <int> <chr>    <list>       #>  1      1 preload                           0            3 0.0-0.0  <named list> #>  2      1 html-keyboard-response            1         5215 0.0-1.0  <named list> #>  3      1 html-keyboard-response            2        13909 0.0-2.0  <named list> #>  4      1 html-keyboard-response            3        17423 0.0-3.0… <named list> #>  5      1 image-keyboard-response           4        18047 0.0-3.0… <named list> #>  6      1 html-keyboard-response            5        18550 0.0-3.0… <named list> #>  7      1 image-keyboard-response           6        19217 0.0-3.0… <named list> #>  8      1 html-keyboard-response            7        19974 0.0-3.0… <named list> #>  9      1 image-keyboard-response           8        20499 0.0-3.0… <named list> #> 10      1 html-keyboard-response            9        21751 0.0-3.0… <named list> #> # … with 14 more rows, and abbreviated variable name ¹​internal_node_id"},{"path":"https://visionlabels.github.io/jspsychread/articles/jspsychread.html","id":"expanding-the-raw-data","dir":"Articles","previous_headings":"Getting started","what":"Expanding the raw data","title":"jspsychread","text":"data plugin differ thus make sense expand tibble trials/plugins time. can see, experiment contains one preload plugin, 13 html-keyboard-response plugins instructions fixation crosses finally 10 image-keyboard-response plugins experiment trials. data raw stored list, can inspect. later can see convert list directly tibbles. Let’s go directly experiment trials. filter command, can use string constant, .e.  trial_type == \"image-keyboard-response\" use predefined constants trial_tyoes list rely auto-complete. means: type trial_types$im, press TAB choose auto-complete drop-dow menu. conversion tibble, use process_records. Currently, set dedicated parsers (starting parse_) call .using argument. create list column processed, can keep list column unnest . Finally, data!","code":"d %>% count(trial_type) #> # A tibble: 3 × 2 #>   trial_type                  n #>   <chr>                   <int> #> 1 html-keyboard-response     13 #> 2 image-keyboard-response    10 #> 3 preload                     1 d %>% slice_head(n = 1) %>% pull(raw) #> [[1]] #> [[1]]$success #> [1] TRUE #>  #> [[1]]$timeout #> [1] FALSE #>  #> [[1]]$failed_images #> list() #>  #> [[1]]$failed_audio #> list() #>  #> [[1]]$failed_video #> list() de <-    d %>%    filter(trial_type == trial_types$image_keyboard_response)  de #> # A tibble: 10 × 6 #>    record trial_type              trial_index time_elapsed intern…¹ raw          #>     <dbl> <chr>                         <int>        <int> <chr>    <list>       #>  1      1 image-keyboard-response           4        18047 0.0-3.0… <named list> #>  2      1 image-keyboard-response           6        19217 0.0-3.0… <named list> #>  3      1 image-keyboard-response           8        20499 0.0-3.0… <named list> #>  4      1 image-keyboard-response          10        22256 0.0-3.0… <named list> #>  5      1 image-keyboard-response          12        23268 0.0-3.0… <named list> #>  6      1 image-keyboard-response          14        25451 0.0-3.0… <named list> #>  7      1 image-keyboard-response          16        26217 0.0-3.0… <named list> #>  8      1 image-keyboard-response          18        27520 0.0-3.0… <named list> #>  9      1 image-keyboard-response          20        29771 0.0-3.0… <named list> #> 10      1 image-keyboard-response          22        31166 0.0-3.0… <named list> #> # … with abbreviated variable name ¹​internal_node_id dep <-   de %>%    # limit the columns to make it more readable   select(record, trial_index, raw) %>%   process_records(.using = parse_image_keyboard_response)   dep #> # A tibble: 10 × 4 #>    record trial_index raw              processed        #>     <dbl>       <int> <list>           <list>           #>  1      1           4 <named list [6]> <tibble [1 × 3]> #>  2      1           6 <named list [6]> <tibble [1 × 3]> #>  3      1           8 <named list [6]> <tibble [1 × 3]> #>  4      1          10 <named list [6]> <tibble [1 × 3]> #>  5      1          12 <named list [6]> <tibble [1 × 3]> #>  6      1          14 <named list [6]> <tibble [1 × 3]> #>  7      1          16 <named list [6]> <tibble [1 × 3]> #>  8      1          18 <named list [6]> <tibble [1 × 3]> #>  9      1          20 <named list [6]> <tibble [1 × 3]> #> 10      1          22 <named list [6]> <tibble [1 × 3]> def <-    dep %>%   unnest(processed)  def #> # A tibble: 10 × 6 #>    record trial_index raw                 rt response stimulus       #>     <dbl>       <int> <list>           <int> <chr>    <chr>          #>  1      1           4 <named list [6]>   612 j        img/orange.png #>  2      1           6 <named list [6]>   665 f        img/blue.png   #>  3      1           8 <named list [6]>   523 f        img/blue.png   #>  4      1          10 <named list [6]>   502 j        img/orange.png #>  5      1          12 <named list [6]>   505 j        img/orange.png #>  6      1          14 <named list [6]>   425 f        img/blue.png   #>  7      1          16 <named list [6]>   509 j        img/orange.png #>  8      1          18 <named list [6]>   545 f        img/blue.png   #>  9      1          20 <named list [6]>   495 j        img/orange.png #> 10      1          22 <named list [6]>   387 f        img/blue.png sumtable <-   def %>%    mutate(     correct = ((response == \"j\") == (stimulus == \"img/orange.png\")),     colour = gsub(\"(img/|\\\\.png)\", \"\", stimulus)   ) %>%    filter(correct) %>%    group_by(colour) %>%    summarise(mean_rt = mean(rt), sd = sd(rt), n = n())  sumtable #> # A tibble: 2 × 4 #>   colour mean_rt    sd     n #>   <chr>    <dbl> <dbl> <int> #> 1 blue      509  109.      5 #> 2 orange    525.  49.1     5"},{"path":"https://visionlabels.github.io/jspsychread/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiri Lukavsky. Author, maintainer.","code":""},{"path":"https://visionlabels.github.io/jspsychread/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lukavsky J (2023). jspsychread: Reading jsPsych data. https://github.com/visionlabels/jspsychread, https://visionlabels.github.io/jspsychread/.","code":"@Manual{,   title = {jspsychread: Reading jsPsych data},   author = {Jiri Lukavsky},   year = {2023},   note = {https://github.com/visionlabels/jspsychread, https://visionlabels.github.io/jspsychread/}, }"},{"path":"https://visionlabels.github.io/jspsychread/index.html","id":"jspsychread","dir":"","previous_headings":"","what":"Reading jsPsych data","title":"Reading jsPsych data","text":"goal jspsychread transform data collected jsPsych stored JSON format R. data available tibbles (one trial per line) can filter etc.","code":""},{"path":"https://visionlabels.github.io/jspsychread/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reading jsPsych data","text":"package active development. can install current version GitHub following code:","code":"# Install devtools package if necessary if(!\"devtools\" %in% rownames(installed.packages())) install.packages(\"devtools\")  # Install the stable verion from GitHub devtools::install_github(\"visionlabels/jspsychread\")"},{"path":"https://visionlabels.github.io/jspsychread/index.html","id":"how-to-start","dir":"","previous_headings":"","what":"How to start","title":"Reading jsPsych data","text":"Check example covers main parts workflow. detailed walk-included package vignette (see vignette(\"jspsychread\")).","code":""},{"path":"https://visionlabels.github.io/jspsychread/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Reading jsPsych data","text":"basic example shows solve common problem: examples , explicitly defined function use process trial data. Since version 0.3.0, process_records can auto-detect parser based trial_type column. still required trials tibble type use filter group_by separate different trial types. intentional decision. diverse trial types tibble, possible unnest . can use simpler call: even parse everything list tibbles.","code":"library(tidyverse) library(jspsychread)  ## basic example code  fn <- demo_file(\"jspsych-video-button-response.json\") d  <- read_jspsych(fn)  # parse results of a specific trial types d %>%   filter(trial_type == trial_types$preload) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_preload) %>%   unnest(processed)  d %>%   filter(trial_type == trial_types$html_button_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_html_button_response) %>%   unnest(processed)  d %>%   filter(trial_type == trial_types$video_button_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_video_button_response) %>%   unnest(processed) d %>%   filter(trial_type == trial_types$html_button_response) %>%   process_records(.using = parse_html_button_response) %>%   unnest(processed) dl <-   d %>%    group_split(trial_type) %>%    map(~ process_records(.x)) dl dl %>% map(~ .x %>% unnest(processed))"},{"path":"https://visionlabels.github.io/jspsychread/reference/default_parsers.html","id":null,"dir":"Reference","previous_headings":"","what":"Default set of parsers — default_parsers","title":"Default set of parsers — default_parsers","text":"list used automatically call respective parsers. primarily used auto-detection process_records. future, possible hold alternative parsers different versions jsPsych (jspsychread).","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/default_parsers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default set of parsers — default_parsers","text":"","code":"default_parsers()"},{"path":"https://visionlabels.github.io/jspsychread/reference/default_parsers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default set of parsers — default_parsers","text":"List trial types respective parser functions","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/default_parsers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default set of parsers — default_parsers","text":"","code":"default_parsers() #> $animation #> function (d)  #> { #>     tibble::tibble(animation_sequence = nested_tibble_from_list(d$animation_sequence),  #>         response = nested_tibble_from_list(d$response)) #> } #> <bytecode: 0x55cbd196d298> #> <environment: namespace:jspsychread> #>  #> $`audio-button-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         stimulus = v_character(d$stimulus)) #> } #> <bytecode: 0x55cbd196a000> #> <environment: namespace:jspsychread> #>  #> $`audio-keyboard-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_character(d$response),  #>         stimulus = v_character(d$stimulus)) #> } #> <bytecode: 0x55cbd196af18> #> <environment: namespace:jspsychread> #>  #> $`audio-slider-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         stimulus = v_character(d$stimulus), slider_start = v_integer(d$slider_start)) #> } #> <bytecode: 0x55cbd1967e08> #> <environment: namespace:jspsychread> #>  #> $`call-function` #> function (d)  #> { #>     tibble::tibble(value = list_column_of_vectors(d$value)) #> } #> <bytecode: 0x55cbd1969180> #> <environment: namespace:jspsychread> #>  #> $`canvas-button-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response)) #> } #> <bytecode: 0x55cbd1965d28> #> <environment: namespace:jspsychread> #>  #> $`canvas-keyboard-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_character(d$response)) #> } #> <bytecode: 0x55cbd1966818> #> <environment: namespace:jspsychread> #>  #> $`canvas-slider-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         slider_start = v_integer(d$slider_start)) #> } #> <bytecode: 0x55cbd1967340> #> <environment: namespace:jspsychread> #>  #> $`categorize-animation` #> function (d)  #> { #>     tibble::tibble(stimulus = list_column_of_vectors(v_character(d$stimulus)),  #>         response = v_character(d$response), rt = v_integer(d$rt),  #>         correct = v_logical(d$correct)) #> } #> <bytecode: 0x55cbd195e4d0> #> <environment: namespace:jspsychread> #>  #> $`categorize-html` #> function (d)  #> { #>     tibble::tibble(stimulus = v_character(d$stimulus), response = v_character(d$response),  #>         rt = v_integer(d$rt), correct = v_logical(d$correct)) #> } #> <bytecode: 0x55cbd195f7d8> #> <environment: namespace:jspsychread> #>  #> $`categorize-image` #> function (d)  #> { #>     tibble::tibble(stimulus = v_character(d$stimulus), response = v_character(d$response),  #>         rt = v_integer(d$rt), correct = v_logical(d$correct)) #> } #> <bytecode: 0x55cbd195c930> #> <environment: namespace:jspsychread> #>  #> $cloze #> function (d)  #> { #>     tibble::tibble(response = list_column_of_vectors(v_character(d$response))) #> } #> <bytecode: 0x55cbd195d928> #> <environment: namespace:jspsychread> #>  #> $`external-html` #> function (d)  #> { #>     tibble::tibble(url = v_character(d$url), rt = v_integer(d$rt)) #> } #> <bytecode: 0x55cbd1959c00> #> <environment: namespace:jspsychread> #>  #> $`free-sort` #> function (d)  #> { #>     init_locations <- bind_rows(d$init_locations) #>     final_locations <- bind_rows(d$final_locations) #>     moves <- bind_rows(d$moves) #>     locations <- init_locations %>% left_join(final_locations,  #>         by = \"src\", suffix = c(\"_init\", \"_final\")) #>     tibble::tibble(locations = nested_tibble(locations), moves = nested_tibble(moves),  #>         rt = v_integer(d$rt)) #> } #> <bytecode: 0x55cbd19568c0> #> <environment: namespace:jspsychread> #>  #> $fullscreen #> function (d)  #> { #>     tibble::tibble(success = v_logical(d$success)) #> } #> <bytecode: 0x55cbd19543f0> #> <environment: namespace:jspsychread> #>  #> $`html-button-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         stimulus = v_character(d$stimulus)) #> } #> <bytecode: 0x55cbd1954ce8> #> <environment: namespace:jspsychread> #>  #> $`html-keyboard-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_character(d$response),  #>         stimulus = v_character(d$stimulus)) #> } #> <bytecode: 0x55cbd1955a08> #> <environment: namespace:jspsychread> #>  #> $`html-slider-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         stimulus = v_character(d$stimulus), slider_start = v_integer(d$slider_start)) #> } #> <bytecode: 0x55cbd1952930> #> <environment: namespace:jspsychread> #>  #> $`iat-html` #> function (d)  #> { #>     tibble::tibble(stimulus = v_character(d$stimulus), response = v_character(d$response),  #>         rt = v_integer(d$rt), correct = v_logical(d$correct)) #> } #> <bytecode: 0x55cbd1953ce0> #> <environment: namespace:jspsychread> #>  #> $`iat-image` #> function (d)  #> { #>     tibble::tibble(stimulus = v_character(d$stimulus), response = v_character(d$response),  #>         rt = v_integer(d$rt), correct = v_logical(d$correct)) #> } #> <bytecode: 0x55cbd194eee0> #> <environment: namespace:jspsychread> #>  #> $`image-button-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         stimulus = v_character(d$stimulus)) #> } #> <bytecode: 0x55cbd194fea0> #> <environment: namespace:jspsychread> #>  #> $`image-keyboard-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_character(d$response),  #>         stimulus = v_character(d$stimulus)) #> } #> <bytecode: 0x55cbd1948f50> #> <environment: namespace:jspsychread> #>  #> $`image-slider-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         stimulus = v_character(d$stimulus), slider_start = v_integer(d$slider_start)) #> } #> <bytecode: 0x55cbd1949ca8> #> <environment: namespace:jspsychread> #>  #> $instructions #> function (d)  #> { #>     view_history_list <- d$view_history #>     tibble::tibble(rt = v_integer(d$rt), view_history = nested_tibble_from_list(view_history_list)) #> } #> <bytecode: 0x55cbd1946dc8> #> <environment: namespace:jspsychread> #>  #> $maxdiff #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), label_left = v_character(d$labels$left),  #>         label_right = v_character(d$labels$right), response_left = v_character(d$response$left),  #>         response_right = v_character(d$response$right), ) #> } #> <bytecode: 0x55cbd1947a78> #> <environment: namespace:jspsychread> #>  #> $preload #> function (d)  #> { #>     tibble::tibble(success = v_logical(d$success), timeout = v_logical(d$timeout),  #>         failed_images = list_column_of_vectors(v_character(d$failed_images)),  #>         failed_audio = list_column_of_vectors(v_character(d$failed_audio)),  #>         failed_video = list_column_of_vectors(v_character(d$failed_video))) #> } #> <bytecode: 0x55cbd19454c8> #> <environment: namespace:jspsychread> #>  #> $reconstruction #> function (d)  #> { #>     tibble::tibble(start_value = v_real(d$start_value), final_value = v_real(d$final_value),  #>         rt = v_integer(d$rt)) #> } #> <bytecode: 0x55cbd1942c40> #> <environment: namespace:jspsychread> #>  #> $resize #> function (d)  #> { #>     tibble::tibble(final_width_px = v_integer(d$final_width_px),  #>         scale_factor = v_real(d$scale_factor)) #> } #> <bytecode: 0x55cbd1943a40> #> <environment: namespace:jspsychread> #>  #> $`same-different-html` #> function (d)  #> { #>     stimuli <- d$stimulus #>     tibble::tibble(stimulus = list_column_of_vectors(v_character(stimuli)),  #>         response = v_character(d$response), rt = v_integer(d$rt),  #>         correct = v_logical(d$correct), answer = v_character(d$answer),  #>         rt_stim1 = v_integer(d$rt_stim1), response_stim1 = v_character(d$response_stim1),  #>         stimulus1 = v_character(stimuli[[1]]), stimulus2 = v_character(stimuli[[2]])) #> } #> <bytecode: 0x55cbd1940818> #> <environment: namespace:jspsychread> #>  #> $`same-different-image` #> function (d)  #> { #>     stimuli <- d$stimulus #>     tibble::tibble(stimulus = list_column_of_vectors(v_character(stimuli)),  #>         response = v_character(d$response), rt = v_integer(d$rt),  #>         correct = v_logical(d$correct), answer = v_character(d$answer),  #>         rt_stim1 = v_integer(d$rt_stim1), response_stim1 = v_character(d$response_stim1),  #>         stimulus1 = v_character(stimuli[[1]]), stimulus2 = v_character(stimuli[[2]])) #> } #> <bytecode: 0x55cbd1942680> #> <environment: namespace:jspsychread> #>  #> $`serial-reaction-time` #> function (d)  #> { #>     grid_array <- d$grid #>     target <- d$target #>     tibble::tibble(grid = list(list2_to_matrix(d$grid)), target_x = v_integer(target[[2]]),  #>         target_y = v_integer(target[[1]]), rt = v_integer(d$rt),  #>         response = v_character(d$response), correct = v_logical(d$correct)) #> } #> <bytecode: 0x55cbd1940488> #> <environment: namespace:jspsychread> #>  #> $`serial-reaction-time-mouse` #> function (d)  #> { #>     grid_array <- d$grid #>     target <- d$target #>     response <- d$response #>     tibble::tibble(grid = list(list2_to_matrix(d$grid)), target_x = v_integer(target[[2]]),  #>         target_y = v_integer(target[[1]]), rt = v_integer(d$rt),  #>         response_x = v_integer(response[[2]]), response_y = v_integer(response[[1]]),  #>         correct = v_logical(d$correct)) #> } #> <bytecode: 0x55cbd193e1e8> #> <environment: namespace:jspsychread> #>  #> $`survey-html-form` #> function (d)  #> { #>     tibble::tibble(response = list_column_of_vectors(d$response),  #>         rt = v_integer(d$rt)) #> } #> <bytecode: 0x55cbd193bff0> #> <environment: namespace:jspsychread> #>  #> $`survey-likert` #> function (d)  #> { #>     responses <- d$response #>     q_name <- names(responses) #>     q_values <- unlist(responses) #>     names(q_values) <- NULL #>     q_order <- unlist(d$question_order) #>     q_order1 <- q_order + 1 #>     nq <- length(q_name) #>     response_tbl <- tibble::tibble(question = q_name, response = q_values,  #>         order = (1:nq)) #>     tibble::tibble(response = nested_tibble(response_tbl), rt = v_integer(d$rt),  #>         question_order = list_column_of_vectors(v_integer(q_order1))) #> } #> <bytecode: 0x55cbd1936dc8> #> <environment: namespace:jspsychread> #>  #> $`survey-multi-choice` #> function (d)  #> { #>     responses <- d$response #>     q_name <- names(responses) #>     q_values <- unlist(responses) #>     q_order <- unlist(d$question_order) #>     q_order1 <- q_order + 1 #>     nq <- length(q_name) #>     response_tbl <- tibble(question = q_name, response = q_values,  #>         order = (1:nq)) #>     tibble::tibble(response = nested_tibble(response_tbl), rt = v_integer(d$rt),  #>         question_order = list_column_of_vectors(v_integer(q_order1))) #> } #> <bytecode: 0x55cbd1935148> #> <environment: namespace:jspsychread> #>  #> $`survey-multi-select` #> function (d)  #> { #>     responses <- d$response #>     nq <- length(responses) #>     response_list <- list() #>     for (i in 1:nq) { #>         response_list[[i]] <- tibble(question = names(responses)[i],  #>             response = single_value(unlist(responses[[i]])),  #>             order = i) #>     } #>     q_order <- unlist(d$question_order) #>     q_order1 <- q_order + 1 #>     response_tbl <- bind_rows(response_list) #>     tibble::tibble(response = nested_tibble(response_tbl), rt = v_integer(d$rt),  #>         question_order = list_column_of_vectors(v_integer(q_order1))) #> } #> <bytecode: 0x55cbd1933068> #> <environment: namespace:jspsychread> #>  #> $`survey-text` #> function (d)  #> { #>     responses <- d$response #>     q_name <- names(responses) #>     q_values <- unlist(responses) #>     q_order <- unlist(d$question_order) #>     q_order1 <- q_order + 1 #>     nq <- length(q_name) #>     response_tbl <- tibble(question = q_name, response = q_values,  #>         order = (1:nq)) #>     tibble::tibble(response = nested_tibble(response_tbl), rt = v_integer(d$rt),  #>         question_order = list_column_of_vectors(v_integer(q_order1))) #> } #> <bytecode: 0x55cbd1931420> #> <environment: namespace:jspsychread> #>  #> $`video-button-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         stimulus = v_character(d$stimulus)) #> } #> <bytecode: 0x55cbd1930e60> #> <environment: namespace:jspsychread> #>  #> $`video-keyboard-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_character(d$response),  #>         stimulus = v_character(d$stimulus)) #> } #> <bytecode: 0x55cbd192be30> #> <environment: namespace:jspsychread> #>  #> $`video-slider-response` #> function (d)  #> { #>     tibble::tibble(rt = v_integer(d$rt), response = v_integer(d$response),  #>         stimulus = v_character(d$stimulus), slider_start = v_integer(d$slider_start),  #>         start = v_real(single_value(d$start))) #> } #> <bytecode: 0x55cbd192cbc0> #> <environment: namespace:jspsychread> #>  #> $`virtual-chinrest` #> NULL #>  #> $`visual-search-circle` #> function (d)  #> { #>     xy <- list2_to_matrix(d$locations) #>     colnames(xy) <- c(\"x\", \"y\") #>     locations <- as_tibble(xy) #>     tibble::tibble(correct = v_logical(d$correct), response = v_character(d$response),  #>         rt = v_integer(d$rt), set_size = v_integer(d$set_size),  #>         target_present = v_logical(d$target_present), locations = nested_tibble(locations)) #> } #> <bytecode: 0x55cbd192a300> #> <environment: namespace:jspsychread> #>  #> $`webgazer-calibrate` #> NULL #>  #> $`webgazer-init-camera` #> NULL #>  #> $`webgazer-validate` #> NULL #>  # extending parsers my_parsers <- default_parsers() my_form_parser <- function(x) { x } # not useful but check parsers.R for inspiration my_parsers[[\"survey_html_form\"]] <- my_form_parser"},{"path":"https://visionlabels.github.io/jspsychread/reference/demo_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Demo files — demo_file","title":"Demo files — demo_file","text":"Returns path example data.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/demo_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demo files — demo_file","text":"","code":"demo_file(fn)"},{"path":"https://visionlabels.github.io/jspsychread/reference/demo_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demo files — demo_file","text":"fn File read demo folder","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/demo_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demo files — demo_file","text":"File path given demo file list available demo files: jspsych-animation.json jspsych-audio-button-response.json jspsych-audio-keyboard-response.json jspsych-audio-slider-response.json jspsych-call-function.json jspsych-canvas-button-response.json jspsych-canvas-keyboard-response.json jspsych-canvas-slider-response.json jspsych-free-sort.json jspsych-fullscreen.json jspsych-html-button-response.json jspsych-html-keyboard-response.json jspsych-html-slider-response.json jspsych-image-button-response.json jspsych-image-keyboard-response.json jspsych-image-slider-response.json jspsych-instructions.json jspsych-serial-reaction-time-mouse.json jspsych-serial-reaction-time.json jspsych-survey-html-form.json jspsych-survey-likert.json jspsych-survey-multi-choice.json jspsych-survey-multi-select.json jspsych-survey-text.json jspsych-video-button-response.json jspsych-video-keyboard-response.json jspsych-video-slider-response.json","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/demo_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demo files — demo_file","text":"","code":"demo_file(\"jspsych-html-button-response.json\") #> [1] \"/home/runner/work/_temp/Library/jspsychread/testdata/jspsych-html-button-response.json\""},{"path":"https://visionlabels.github.io/jspsychread/reference/jspsychread-package.html","id":null,"dir":"Reference","previous_headings":"","what":"jspsychread: Reading jsPsych data — jspsychread-package","title":"jspsychread: Reading jsPsych data — jspsychread-package","text":"package helps process JSON data collected using jsPsych scripts.","code":""},{"path":[]},{"path":"https://visionlabels.github.io/jspsychread/reference/jspsychread-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jspsychread: Reading jsPsych data — jspsychread-package","text":"Maintainer: Jiri Lukavsky lukavsky@praha.psu.cas.cz (ORCID)","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/list2_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list of lists into a matrix — list2_to_matrix","title":"Convert list of lists into a matrix — list2_to_matrix","text":"expect representation serial-reaction-time-mouse: inner array represents single row. entries inner arrays represent columns.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/list2_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list of lists into a matrix — list2_to_matrix","text":"","code":"list2_to_matrix(x, byrow = T)"},{"path":"https://visionlabels.github.io/jspsychread/reference/list2_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list of lists into a matrix — list2_to_matrix","text":"x List lists, expecting inner-lists length byrow logical. TRUE (default) matrix filled rows, otherwise matrix filled columns.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/list2_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list of lists into a matrix — list2_to_matrix","text":"Matrix","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/list2_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert list of lists into a matrix — list2_to_matrix","text":"","code":"l <- list(list(1:3), list(4:6)) list2_to_matrix(l) #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    4    5    6"},{"path":"https://visionlabels.github.io/jspsychread/reference/list_column_of_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to create a list column with vectors in parser results — list_column_of_vectors","title":"Wrapper to create a list column with vectors in parser results — list_column_of_vectors","text":"Mainly used documenting parser code.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/list_column_of_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to create a list column with vectors in parser results — list_column_of_vectors","text":"","code":"list_column_of_vectors(x, replace_null = T)"},{"path":"https://visionlabels.github.io/jspsychread/reference/list_column_of_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to create a list column with vectors in parser results — list_column_of_vectors","text":"x Vector replace_null True NULL replaced NA","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/list_column_of_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to create a list column with vectors in parser results — list_column_of_vectors","text":"List containing x","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/list_column_of_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to create a list column with vectors in parser results — list_column_of_vectors","text":"","code":"library(tibble) tb <- tibble(i = 1, j = list_column_of_vectors(1:10)) tb #> # A tibble: 1 × 2 #>       i j          #>   <dbl> <list>     #> 1     1 <int [10]> tb$j[[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to nest a tibble into parser result — nested_tibble","title":"Wrapper to nest a tibble into parser result — nested_tibble","text":"Mainly used documenting parser code.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to nest a tibble into parser result — nested_tibble","text":"","code":"nested_tibble(x)"},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to nest a tibble into parser result — nested_tibble","text":"x Tibble","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to nest a tibble into parser result — nested_tibble","text":"List containing x","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to nest a tibble into parser result — nested_tibble","text":"","code":"library(tibble) ta <- tibble(a = 1:2) tb <- tibble(i = 1, j = nested_tibble(ta)) ta #> # A tibble: 2 × 1 #>       a #>   <int> #> 1     1 #> 2     2 tb #> # A tibble: 1 × 2 #>       i j                #>   <dbl> <list>           #> 1     1 <tibble [2 × 1]>"},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble_from_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to nest a tibble from a list into parser result — nested_tibble_from_list","title":"Wrapper to nest a tibble from a list into parser result — nested_tibble_from_list","text":"Mainly used documenting parser code.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble_from_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to nest a tibble from a list into parser result — nested_tibble_from_list","text":"","code":"nested_tibble_from_list(x)"},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble_from_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to nest a tibble from a list into parser result — nested_tibble_from_list","text":"x List can transformed tibble using bind_rows","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble_from_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to nest a tibble from a list into parser result — nested_tibble_from_list","text":"List containing tibble created x","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/nested_tibble_from_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to nest a tibble from a list into parser result — nested_tibble_from_list","text":"","code":"library(tibble) d <- list(list(\"a\" = 1, \"b\" = \"apple\"), list(\"a\" = 2, \"b\" = \"banana\")) d #> [[1]] #> [[1]]$a #> [1] 1 #>  #> [[1]]$b #> [1] \"apple\" #>  #>  #> [[2]] #> [[2]]$a #> [1] 2 #>  #> [[2]]$b #> [1] \"banana\" #>  #>  tb <- tibble(i = 1, j = nested_tibble_from_list(d)) tb #> # A tibble: 1 × 2 #>       i j                #>   <dbl> <list>           #> 1     1 <tibble [2 × 2]>"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_animation.html","id":null,"dir":"Reference","previous_headings":"","what":"animation parser — parse_animation","title":"animation parser — parse_animation","text":"https://www.jspsych.org/7.3/plugins/animation","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_animation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"animation parser — parse_animation","text":"","code":"parse_animation(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_animation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"animation parser — parse_animation","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_animation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"animation parser — parse_animation","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_animation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"animation parser — parse_animation","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-animation.json\") d  <- read_jspsych(fn) anim_data <-   d %>%   filter(trial_type == trial_types$animation) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_animation) %>%   unnest(processed) anim_data %>% unnest(response) anim_data %>% unnest(animation_sequence) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_button_response.html","id":null,"dir":"Reference","previous_headings":"","what":"audio-button-response parser — parse_audio_button_response","title":"audio-button-response parser — parse_audio_button_response","text":"https://www.jspsych.org/7.3/plugins/audio-button-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_button_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"audio-button-response parser — parse_audio_button_response","text":"","code":"parse_audio_button_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_button_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"audio-button-response parser — parse_audio_button_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_button_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"audio-button-response parser — parse_audio_button_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_button_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"audio-button-response parser — parse_audio_button_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-audio-button-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$audio_button_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_audio_button_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_keyboard_response.html","id":null,"dir":"Reference","previous_headings":"","what":"audio-keyboard-response parser — parse_audio_keyboard_response","title":"audio-keyboard-response parser — parse_audio_keyboard_response","text":"https://www.jspsych.org/7.3/plugins/audio-keyboard-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_keyboard_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"audio-keyboard-response parser — parse_audio_keyboard_response","text":"","code":"parse_audio_keyboard_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_keyboard_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"audio-keyboard-response parser — parse_audio_keyboard_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_keyboard_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"audio-keyboard-response parser — parse_audio_keyboard_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_keyboard_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"audio-keyboard-response parser — parse_audio_keyboard_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-audio-keyboard-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$audio_keyboard_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_audio_keyboard_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_slider_response.html","id":null,"dir":"Reference","previous_headings":"","what":"audio-slider-response parser — parse_audio_slider_response","title":"audio-slider-response parser — parse_audio_slider_response","text":"https://www.jspsych.org/7.3/plugins/audio-slider-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_slider_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"audio-slider-response parser — parse_audio_slider_response","text":"","code":"parse_audio_slider_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_slider_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"audio-slider-response parser — parse_audio_slider_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_slider_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"audio-slider-response parser — parse_audio_slider_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_audio_slider_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"audio-slider-response parser — parse_audio_slider_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-audio-slider-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$audio_slider_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_audio_slider_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_call_function.html","id":null,"dir":"Reference","previous_headings":"","what":"call-function parser — parse_call_function","title":"call-function parser — parse_call_function","text":"https://www.jspsych.org/7.3/plugins/call-function","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_call_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"call-function parser — parse_call_function","text":"","code":"parse_call_function(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_call_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"call-function parser — parse_call_function","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_call_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"call-function parser — parse_call_function","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_call_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"call-function parser — parse_call_function","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-call-function.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$call_function) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_call_function) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_button_response.html","id":null,"dir":"Reference","previous_headings":"","what":"canvas-button-response parser — parse_canvas_button_response","title":"canvas-button-response parser — parse_canvas_button_response","text":"https://www.jspsych.org/7.3/plugins/canvas-button-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_button_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"canvas-button-response parser — parse_canvas_button_response","text":"","code":"parse_canvas_button_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_button_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"canvas-button-response parser — parse_canvas_button_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_button_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"canvas-button-response parser — parse_canvas_button_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_button_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"canvas-button-response parser — parse_canvas_button_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-canvas-button-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$canvas_button_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_canvas_button_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_keyboard_response.html","id":null,"dir":"Reference","previous_headings":"","what":"canvas-keyboard-response parser — parse_canvas_keyboard_response","title":"canvas-keyboard-response parser — parse_canvas_keyboard_response","text":"https://www.jspsych.org/7.3/plugins/canvas-keyboard-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_keyboard_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"canvas-keyboard-response parser — parse_canvas_keyboard_response","text":"","code":"parse_canvas_keyboard_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_keyboard_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"canvas-keyboard-response parser — parse_canvas_keyboard_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_keyboard_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"canvas-keyboard-response parser — parse_canvas_keyboard_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_keyboard_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"canvas-keyboard-response parser — parse_canvas_keyboard_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-canvas-keyboard-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$canvas_keyboard_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_canvas_keyboard_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_slider_response.html","id":null,"dir":"Reference","previous_headings":"","what":"canvas-slider-response parser — parse_canvas_slider_response","title":"canvas-slider-response parser — parse_canvas_slider_response","text":"https://www.jspsych.org/7.3/plugins/canvas-slider-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_slider_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"canvas-slider-response parser — parse_canvas_slider_response","text":"","code":"parse_canvas_slider_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_slider_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"canvas-slider-response parser — parse_canvas_slider_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_slider_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"canvas-slider-response parser — parse_canvas_slider_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_canvas_slider_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"canvas-slider-response parser — parse_canvas_slider_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-canvas-slider-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$canvas_slider_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_canvas_slider_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_animation.html","id":null,"dir":"Reference","previous_headings":"","what":"categorize-animation parser — parse_categorize_animation","title":"categorize-animation parser — parse_categorize_animation","text":"https://www.jspsych.org/7.3/plugins/categorize-animation","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_animation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"categorize-animation parser — parse_categorize_animation","text":"","code":"parse_categorize_animation(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_animation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"categorize-animation parser — parse_categorize_animation","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_animation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"categorize-animation parser — parse_categorize_animation","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_animation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"categorize-animation parser — parse_categorize_animation","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-categorize-animation.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$categorize_animation) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_categorize_animation) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_html.html","id":null,"dir":"Reference","previous_headings":"","what":"categorize-html parser — parse_categorize_html","title":"categorize-html parser — parse_categorize_html","text":"https://www.jspsych.org/7.3/plugins/categorize-html","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"categorize-html parser — parse_categorize_html","text":"","code":"parse_categorize_html(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"categorize-html parser — parse_categorize_html","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"categorize-html parser — parse_categorize_html","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"categorize-html parser — parse_categorize_html","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-categorize-html.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$categorize_html) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_categorize_html) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_image.html","id":null,"dir":"Reference","previous_headings":"","what":"categorize-image parser — parse_categorize_image","title":"categorize-image parser — parse_categorize_image","text":"https://www.jspsych.org/7.3/plugins/categorize-image","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"categorize-image parser — parse_categorize_image","text":"","code":"parse_categorize_image(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"categorize-image parser — parse_categorize_image","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"categorize-image parser — parse_categorize_image","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_categorize_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"categorize-image parser — parse_categorize_image","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-categorize-image.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$categorize_image) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_categorize_image) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_cloze.html","id":null,"dir":"Reference","previous_headings":"","what":"cloze parser — parse_cloze","title":"cloze parser — parse_cloze","text":"https://www.jspsych.org/7.3/plugins/cloze","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_cloze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cloze parser — parse_cloze","text":"","code":"parse_cloze(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_cloze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cloze parser — parse_cloze","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_cloze.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cloze parser — parse_cloze","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_cloze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cloze parser — parse_cloze","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-cloze.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$cloze) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_cloze) %>%   unnest(processed) # for individual values trials %>%   unnest(response) %>%   mutate(cell_value = flatten_chr(response)) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_external_html.html","id":null,"dir":"Reference","previous_headings":"","what":"external-html parser — parse_external_html","title":"external-html parser — parse_external_html","text":"https://www.jspsych.org/7.3/plugins/external-html","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_external_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"external-html parser — parse_external_html","text":"","code":"parse_external_html(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_external_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"external-html parser — parse_external_html","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_external_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"external-html parser — parse_external_html","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_external_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"external-html parser — parse_external_html","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-external-html.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$external_html) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_external_html) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_free_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"free-sort parser — parse_free_sort","title":"free-sort parser — parse_free_sort","text":"https://www.jspsych.org/7.3/plugins/free-sort","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_free_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"free-sort parser — parse_free_sort","text":"","code":"parse_free_sort(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_free_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"free-sort parser — parse_free_sort","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_free_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"free-sort parser — parse_free_sort","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_free_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"free-sort parser — parse_free_sort","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-free-sort.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$free_sort) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_free_sort) %>%   unnest(processed) # for locations trials %>% select(-raw, -moves) %>% unnest(locations) # for moves trials %>% select(-raw, -locations) %>% unnest(moves) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_fullscreen.html","id":null,"dir":"Reference","previous_headings":"","what":"fullscreen parser — parse_fullscreen","title":"fullscreen parser — parse_fullscreen","text":"https://www.jspsych.org/7.3/plugins/fullscreen","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_fullscreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fullscreen parser — parse_fullscreen","text":"","code":"parse_fullscreen(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_fullscreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fullscreen parser — parse_fullscreen","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_fullscreen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fullscreen parser — parse_fullscreen","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_fullscreen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fullscreen parser — parse_fullscreen","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-fullscreen.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$fullscreen) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_fullscreen) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_button_response.html","id":null,"dir":"Reference","previous_headings":"","what":"html-button-response parser — parse_html_button_response","title":"html-button-response parser — parse_html_button_response","text":"https://www.jspsych.org/7.3/plugins/html-button-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_button_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"html-button-response parser — parse_html_button_response","text":"","code":"parse_html_button_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_button_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"html-button-response parser — parse_html_button_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_button_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"html-button-response parser — parse_html_button_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_button_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"html-button-response parser — parse_html_button_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-html-button-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$html_button_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_html_button_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_keyboard_response.html","id":null,"dir":"Reference","previous_headings":"","what":"html-keyboard-response parser — parse_html_keyboard_response","title":"html-keyboard-response parser — parse_html_keyboard_response","text":"https://www.jspsych.org/7.3/plugins/html-keyboard-response/","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_keyboard_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"html-keyboard-response parser — parse_html_keyboard_response","text":"","code":"parse_html_keyboard_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_keyboard_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"html-keyboard-response parser — parse_html_keyboard_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_keyboard_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"html-keyboard-response parser — parse_html_keyboard_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_keyboard_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"html-keyboard-response parser — parse_html_keyboard_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-html-keyboard-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$html_keyboard_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_html_keyboard_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_slider_response.html","id":null,"dir":"Reference","previous_headings":"","what":"html-slider-response parser — parse_html_slider_response","title":"html-slider-response parser — parse_html_slider_response","text":"https://www.jspsych.org/7.3/plugins/html-slider-response/","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_slider_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"html-slider-response parser — parse_html_slider_response","text":"","code":"parse_html_slider_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_slider_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"html-slider-response parser — parse_html_slider_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_slider_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"html-slider-response parser — parse_html_slider_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_html_slider_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"html-slider-response parser — parse_html_slider_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-html-slider-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$html_slider_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_html_slider_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_html.html","id":null,"dir":"Reference","previous_headings":"","what":"iat-html parser — parse_iat_html","title":"iat-html parser — parse_iat_html","text":"https://www.jspsych.org/7.3/plugins/iat-html","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iat-html parser — parse_iat_html","text":"","code":"parse_iat_html(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iat-html parser — parse_iat_html","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iat-html parser — parse_iat_html","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iat-html parser — parse_iat_html","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-iat.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$iat_html) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_iat_html) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_image.html","id":null,"dir":"Reference","previous_headings":"","what":"iat-image parser — parse_iat_image","title":"iat-image parser — parse_iat_image","text":"https://www.jspsych.org/7.3/plugins/iat-image","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iat-image parser — parse_iat_image","text":"","code":"parse_iat_image(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iat-image parser — parse_iat_image","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iat-image parser — parse_iat_image","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_iat_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"iat-image parser — parse_iat_image","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-iat.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$iat_image) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_iat_image) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_button_response.html","id":null,"dir":"Reference","previous_headings":"","what":"image-button-response parser — parse_image_button_response","title":"image-button-response parser — parse_image_button_response","text":"https://www.jspsych.org/7.3/plugins/image-button-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_button_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"image-button-response parser — parse_image_button_response","text":"","code":"parse_image_button_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_button_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"image-button-response parser — parse_image_button_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_button_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"image-button-response parser — parse_image_button_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_button_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"image-button-response parser — parse_image_button_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-image-button-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$image_button_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_image_button_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_keyboard_response.html","id":null,"dir":"Reference","previous_headings":"","what":"image-keyboard-response parser — parse_image_keyboard_response","title":"image-keyboard-response parser — parse_image_keyboard_response","text":"https://www.jspsych.org/7.3/plugins/image-keyboard-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_keyboard_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"image-keyboard-response parser — parse_image_keyboard_response","text":"","code":"parse_image_keyboard_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_keyboard_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"image-keyboard-response parser — parse_image_keyboard_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_keyboard_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"image-keyboard-response parser — parse_image_keyboard_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_keyboard_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"image-keyboard-response parser — parse_image_keyboard_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-image-keyboard-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$image_keyboard_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_image_keyboard_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_slider_response.html","id":null,"dir":"Reference","previous_headings":"","what":"image-slider-response parser — parse_image_slider_response","title":"image-slider-response parser — parse_image_slider_response","text":"https://www.jspsych.org/7.3/plugins/image-slider-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_slider_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"image-slider-response parser — parse_image_slider_response","text":"","code":"parse_image_slider_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_slider_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"image-slider-response parser — parse_image_slider_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_slider_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"image-slider-response parser — parse_image_slider_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_image_slider_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"image-slider-response parser — parse_image_slider_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-image-slider-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$image_slider_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_image_slider_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_instructions.html","id":null,"dir":"Reference","previous_headings":"","what":"instructions parser — parse_instructions","title":"instructions parser — parse_instructions","text":"https://www.jspsych.org/7.3/plugins/instructions","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_instructions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"instructions parser — parse_instructions","text":"","code":"parse_instructions(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_instructions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"instructions parser — parse_instructions","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_instructions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"instructions parser — parse_instructions","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_instructions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"instructions parser — parse_instructions","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-instructions.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$instructions) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_instructions) %>%   unnest(processed) %>%   unnest(view_history) # for page data }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_maxdiff.html","id":null,"dir":"Reference","previous_headings":"","what":"maxdiff parser — parse_maxdiff","title":"maxdiff parser — parse_maxdiff","text":"https://www.jspsych.org/7.3/plugins/maxdiff","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_maxdiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"maxdiff parser — parse_maxdiff","text":"","code":"parse_maxdiff(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_maxdiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"maxdiff parser — parse_maxdiff","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_maxdiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"maxdiff parser — parse_maxdiff","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_maxdiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"maxdiff parser — parse_maxdiff","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-maxdiff.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$maxdiff) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_maxdiff) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_preload.html","id":null,"dir":"Reference","previous_headings":"","what":"preload parser — parse_preload","title":"preload parser — parse_preload","text":"https://www.jspsych.org/7.3/plugins/preload","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_preload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"preload parser — parse_preload","text":"","code":"parse_preload(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_preload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"preload parser — parse_preload","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_preload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"preload parser — parse_preload","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_preload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"preload parser — parse_preload","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-preload.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$preload) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_preload) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_reconstruction.html","id":null,"dir":"Reference","previous_headings":"","what":"reconstruction parser — parse_reconstruction","title":"reconstruction parser — parse_reconstruction","text":"https://www.jspsych.org/7.3/plugins/reconstruction","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_reconstruction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reconstruction parser — parse_reconstruction","text":"","code":"parse_reconstruction(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_reconstruction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reconstruction parser — parse_reconstruction","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_reconstruction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reconstruction parser — parse_reconstruction","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_reconstruction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reconstruction parser — parse_reconstruction","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-reconstruction.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$reconstruction) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_reconstruction) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_resize.html","id":null,"dir":"Reference","previous_headings":"","what":"resize parser — parse_resize","title":"resize parser — parse_resize","text":"https://www.jspsych.org/7.3/plugins/resize","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_resize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resize parser — parse_resize","text":"","code":"parse_resize(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_resize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resize parser — parse_resize","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_resize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resize parser — parse_resize","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_resize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"resize parser — parse_resize","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-resize.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$resize) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_resize) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_html.html","id":null,"dir":"Reference","previous_headings":"","what":"same-different-html parser — parse_same_different_html","title":"same-different-html parser — parse_same_different_html","text":"https://www.jspsych.org/7.3/plugins/-different-html","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"same-different-html parser — parse_same_different_html","text":"","code":"parse_same_different_html(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"same-different-html parser — parse_same_different_html","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"same-different-html parser — parse_same_different_html","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"same-different-html parser — parse_same_different_html","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-same-different-html.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$same_different_html) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_same_different_html) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_image.html","id":null,"dir":"Reference","previous_headings":"","what":"same-different-image parser — parse_same_different_image","title":"same-different-image parser — parse_same_different_image","text":"https://www.jspsych.org/7.3/plugins/-different-image","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"same-different-image parser — parse_same_different_image","text":"","code":"parse_same_different_image(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"same-different-image parser — parse_same_different_image","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"same-different-image parser — parse_same_different_image","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_same_different_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"same-different-image parser — parse_same_different_image","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-same-different-image.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$same_different_image) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_same_different_image) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time.html","id":null,"dir":"Reference","previous_headings":"","what":"serial-reaction-time parser — parse_serial_reaction_time","title":"serial-reaction-time parser — parse_serial_reaction_time","text":"https://www.jspsych.org/7.3/plugins/serial-reaction-time","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"serial-reaction-time parser — parse_serial_reaction_time","text":"","code":"parse_serial_reaction_time(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"serial-reaction-time parser — parse_serial_reaction_time","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"serial-reaction-time parser — parse_serial_reaction_time","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"serial-reaction-time parser — parse_serial_reaction_time","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-serial-reaction-time.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$serial_reaction_time) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_serial_reaction_time) %>%   unnest(processed) trials %>%   select(-raw) %>%   mutate(ncol = map_int(.$grid, ~ ncol(.)),          nrow = map_int(.$grid, ~ nrow(.))) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"serial-reaction-time-mouse parser — parse_serial_reaction_time_mouse","title":"serial-reaction-time-mouse parser — parse_serial_reaction_time_mouse","text":"https://www.jspsych.org/7.3/plugins/serial-reaction-time-mouse","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"serial-reaction-time-mouse parser — parse_serial_reaction_time_mouse","text":"","code":"parse_serial_reaction_time_mouse(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time_mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"serial-reaction-time-mouse parser — parse_serial_reaction_time_mouse","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time_mouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"serial-reaction-time-mouse parser — parse_serial_reaction_time_mouse","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_serial_reaction_time_mouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"serial-reaction-time-mouse parser — parse_serial_reaction_time_mouse","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-serial-reaction-time-mouse.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$serial_reaction_time_mouse) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_serial_reaction_time_mouse) %>%   unnest(processed) trials %>%   select(-raw) %>%   mutate(ncol = map_int(.$grid, ~ ncol(.)),          nrow = map_int(.$grid, ~ nrow(.))) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_single_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Export all generic data from single session — parse_single_record","title":"Export all generic data from single session — parse_single_record","text":"Export generic data single session","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_single_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export all generic data from single session — parse_single_record","text":"","code":"parse_single_record(jsondata)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_single_record.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export all generic data from single session — parse_single_record","text":"jsondata Data JSON format Currently trial_type    (string)    - name plugin used run trial. trial_index (numeric) - index current trial across whole experiment. time_elapsed    (numeric)    - number milliseconds start experiment trial ended. internal_node_id    (string) - string identifier current TimelineNode. raw (list) - list column plugin data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_single_record.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export all generic data from single session — parse_single_record","text":"tibble generic data trial/plugin result separate lines","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_html_form.html","id":null,"dir":"Reference","previous_headings":"","what":"survey-html-form parser — parse_survey_html_form","title":"survey-html-form parser — parse_survey_html_form","text":"https://www.jspsych.org/7.3/plugins/survey-html-form","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_html_form.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survey-html-form parser — parse_survey_html_form","text":"","code":"parse_survey_html_form(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_html_form.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survey-html-form parser — parse_survey_html_form","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_html_form.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survey-html-form parser — parse_survey_html_form","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_html_form.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survey-html-form parser — parse_survey_html_form","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-survey-html-form.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$survey_html_form) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_survey_html_form) %>%   unnest(processed) trials %>%   filter(trial_index == 0) %>%   select(-raw) %>%   mutate(bind_rows(response)) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_likert.html","id":null,"dir":"Reference","previous_headings":"","what":"survey-likert parser — parse_survey_likert","title":"survey-likert parser — parse_survey_likert","text":"https://www.jspsych.org/7.3/plugins/survey-likert","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_likert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survey-likert parser — parse_survey_likert","text":"","code":"parse_survey_likert(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_likert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survey-likert parser — parse_survey_likert","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_likert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survey-likert parser — parse_survey_likert","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_likert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survey-likert parser — parse_survey_likert","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-survey-likert.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$survey_likert) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_survey_likert) %>%   unnest(processed) # individual questions/responses trials %>%   filter(trial_index == 1) %>%   unnest(response) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_choice.html","id":null,"dir":"Reference","previous_headings":"","what":"survey-multi-choice parser — parse_survey_multi_choice","title":"survey-multi-choice parser — parse_survey_multi_choice","text":"https://www.jspsych.org/7.3/plugins/survey-multi-choice","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_choice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survey-multi-choice parser — parse_survey_multi_choice","text":"","code":"parse_survey_multi_choice(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_choice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survey-multi-choice parser — parse_survey_multi_choice","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_choice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survey-multi-choice parser — parse_survey_multi_choice","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_choice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survey-multi-choice parser — parse_survey_multi_choice","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-survey-multi-choice.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$survey_multi_choice) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_survey_multi_choice) %>%   unnest(processed) trials %>%   filter(trial_index == 1) %>%   unnest(response) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_select.html","id":null,"dir":"Reference","previous_headings":"","what":"survey-multi-select parser — parse_survey_multi_select","title":"survey-multi-select parser — parse_survey_multi_select","text":"https://www.jspsych.org/7.3/plugins/survey-multi-select","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survey-multi-select parser — parse_survey_multi_select","text":"","code":"parse_survey_multi_select(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survey-multi-select parser — parse_survey_multi_select","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survey-multi-select parser — parse_survey_multi_select","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_multi_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survey-multi-select parser — parse_survey_multi_select","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-survey-multi-select.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$survey_multi_select) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_survey_multi_select) %>%   unnest(processed) trials %>%   select(-raw, -question_order) %>%   filter(trial_index == 0) %>%   unnest(response) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_text.html","id":null,"dir":"Reference","previous_headings":"","what":"survey-text parser — parse_survey_text","title":"survey-text parser — parse_survey_text","text":"https://www.jspsych.org/7.3/plugins/survey-text","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"survey-text parser — parse_survey_text","text":"","code":"parse_survey_text(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"survey-text parser — parse_survey_text","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"survey-text parser — parse_survey_text","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_survey_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"survey-text parser — parse_survey_text","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-survey-text.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$survey_text) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_survey_text) %>%   unnest(processed) trials %>%   filter(trial_index == 1) %>%   unnest(response) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_button_response.html","id":null,"dir":"Reference","previous_headings":"","what":"video-button-response parser — parse_video_button_response","title":"video-button-response parser — parse_video_button_response","text":"https://www.jspsych.org/7.3/plugins/video-button-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_button_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"video-button-response parser — parse_video_button_response","text":"","code":"parse_video_button_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_button_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"video-button-response parser — parse_video_button_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_button_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"video-button-response parser — parse_video_button_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_button_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"video-button-response parser — parse_video_button_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-video-button-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$video_button_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_video_button_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_keyboard_response.html","id":null,"dir":"Reference","previous_headings":"","what":"video-keyboard-response parser — parse_video_keyboard_response","title":"video-keyboard-response parser — parse_video_keyboard_response","text":"https://www.jspsych.org/7.3/plugins/video-keyboard-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_keyboard_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"video-keyboard-response parser — parse_video_keyboard_response","text":"","code":"parse_video_keyboard_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_keyboard_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"video-keyboard-response parser — parse_video_keyboard_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_keyboard_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"video-keyboard-response parser — parse_video_keyboard_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_keyboard_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"video-keyboard-response parser — parse_video_keyboard_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-video-keyboard-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$video_keyboard_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_video_keyboard_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_slider_response.html","id":null,"dir":"Reference","previous_headings":"","what":"video-slider-response parser — parse_video_slider_response","title":"video-slider-response parser — parse_video_slider_response","text":"https://www.jspsych.org/7.3/plugins/video-slider-response","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_slider_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"video-slider-response parser — parse_video_slider_response","text":"","code":"parse_video_slider_response(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_slider_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"video-slider-response parser — parse_video_slider_response","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_slider_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"video-slider-response parser — parse_video_slider_response","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_video_slider_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"video-slider-response parser — parse_video_slider_response","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-video-slider-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$video_slider_response) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_video_slider_response) %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_visual_search_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"visual-search-circle parser — parse_visual_search_circle","title":"visual-search-circle parser — parse_visual_search_circle","text":"https://www.jspsych.org/7.3/plugins/visual-search-circle","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_visual_search_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"visual-search-circle parser — parse_visual_search_circle","text":"","code":"parse_visual_search_circle(d)"},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_visual_search_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"visual-search-circle parser — parse_visual_search_circle","text":"d List unprocessed trial data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_visual_search_circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"visual-search-circle parser — parse_visual_search_circle","text":"Single row tibble results. Check jsPsych documentation list available variables.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/parse_visual_search_circle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"visual-search-circle parser — parse_visual_search_circle","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-visual-search-circle.json\") d  <- read_jspsych(fn) trials <-   d %>%   filter(trial_type == trial_types$visual_search_circle) %>%   select(record, trial_index, raw) %>%   process_records(.using = parse_visual_search_circle) %>%   unnest(processed) trials %>%   select(record, trial_index, locations) %>%   unnest(locations) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://visionlabels.github.io/jspsychread/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/process_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Process raw jsPsych data — process_records","title":"Process raw jsPsych data — process_records","text":"Process raw jsPsych data","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/process_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process raw jsPsych data — process_records","text":"","code":"process_records(x, .using = NULL, auto = default_parsers())"},{"path":"https://visionlabels.github.io/jspsychread/reference/process_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process raw jsPsych data — process_records","text":"x Dataset jsPsych records .using Parser function use record. Use NULL auto-detection. auto List trial types parser functions used auto-detection.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/process_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process raw jsPsych data — process_records","text":"Original dataset new column processed nested results.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/process_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process raw jsPsych data — process_records","text":"","code":"if (FALSE) { fn <- demo_file(\"jspsych-html-button-response.json\") d  <- read_jspsych(fn) d %>%   filter(trial_type == trial_types$html_button_response) %>%   process_records(.using = parse_html_button_response) %>%   unnest(processed) # auto-detected d %>%   filter(trial_type == trial_types$html_button_response) %>%   process_records() %>%   unnest(processed) }"},{"path":"https://visionlabels.github.io/jspsychread/reference/read_jspsych.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads jsPsych data into tibble — read_jspsych","title":"Reads jsPsych data into tibble — read_jspsych","text":"default, code expects file single JSON structure white spaces line delimiters (single = T). alternative behaviour (single = F) expects format multiple JSON records, single line. Results stored JATOS server follow structure.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/read_jspsych.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads jsPsych data into tibble — read_jspsych","text":"","code":"read_jspsych(filepath, single = T)"},{"path":"https://visionlabels.github.io/jspsychread/reference/read_jspsych.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads jsPsych data into tibble — read_jspsych","text":"filepath File read single Indicates whether file contains single record multiple records (separate line)","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/read_jspsych.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads jsPsych data into tibble — read_jspsych","text":"tibble trial/plugin result separate line. tibble features following columns: trial_type\t(string)\t- name plugin used run trial. trial_index (numeric) - index current trial across whole experiment. time_elapsed\t(numeric)\t- number milliseconds start experiment trial ended. internal_node_id\t(string) - string identifier current TimelineNode. raw (list) - list column plugin data","code":""},{"path":[]},{"path":"https://visionlabels.github.io/jspsychread/reference/read_jspsych.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads jsPsych data into tibble — read_jspsych","text":"","code":"read_jspsych(demo_file(\"jspsych-html-button-response.json\")) #> # A tibble: 3 × 6 #>   record trial_type           trial_index time_elapsed internal_n…¹ raw          #>    <dbl> <chr>                      <int>        <int> <chr>        <list>       #> 1      1 html-button-response           0         7419 0.0-0.0      <named list> #> 2      1 html-button-response           1        11133 0.0-1.0      <named list> #> 3      1 html-button-response           2        13140 0.0-2.0      <named list> #> # … with abbreviated variable name ¹​internal_node_id"},{"path":"https://visionlabels.github.io/jspsychread/reference/single_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for possible null objects — single_value","title":"Wrapper for possible null objects — single_value","text":"Wrapper possible null objects","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/single_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for possible null objects — single_value","text":"","code":"single_value(x)"},{"path":"https://visionlabels.github.io/jspsychread/reference/single_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for possible null objects — single_value","text":"x Object check","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/single_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for possible null objects — single_value","text":"object NA object null.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/single_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for possible null objects — single_value","text":"","code":"single_value(1) #> [1] 1 single_value(NA) #> [1] NA single_value(NULL) #> [1] NA single_value(1:3) #> [1] 1 2 3"},{"path":"https://visionlabels.github.io/jspsychread/reference/trial_types.html","id":null,"dir":"Reference","previous_headings":"","what":"List of trial types — trial_types","title":"List of trial types — trial_types","text":"List trial types plugins jsPsych. Instead specifying correct name plugin, can start typing trial_types rely auto-complete. names list identical original plugin names, minus signs replaced underscores.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/trial_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of trial types — trial_types","text":"","code":"trial_types"},{"path":"https://visionlabels.github.io/jspsychread/reference/trial_types.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of trial types — trial_types","text":"object class list length 45.","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/trial_types.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"List of trial types — trial_types","text":"https://www.jspsych.org/7.0/plugins/list--plugins/","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/trial_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of trial types — trial_types","text":"","code":"trial_types$html_button_response #> [1] \"html-button-response\""},{"path":"https://visionlabels.github.io/jspsychread/reference/v_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Typed wrappers for possible null objects — v_integer","title":"Typed wrappers for possible null objects — v_integer","text":"v_integer() converts integers v_character() converts character v_real() converts real numbers v_logical() converts logical values","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/v_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typed wrappers for possible null objects — v_integer","text":"","code":"v_integer(x)  v_character(x)  v_real(x)  v_logical(x)"},{"path":"https://visionlabels.github.io/jspsychread/reference/v_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typed wrappers for possible null objects — v_integer","text":"x Object check","code":""},{"path":"https://visionlabels.github.io/jspsychread/reference/v_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typed wrappers for possible null objects — v_integer","text":"object NA object null.","code":""},{"path":"https://visionlabels.github.io/jspsychread/news/index.html","id":"jspsychread-030","dir":"Changelog","previous_headings":"","what":"jspsychread 0.3.0","title":"jspsychread 0.3.0","text":"Auto-detection parsers process_records.","code":""},{"path":"https://visionlabels.github.io/jspsychread/news/index.html","id":"jspsychread-020","dir":"Changelog","previous_headings":"","what":"jspsychread 0.2.0","title":"jspsychread 0.2.0","text":"Typed import utilities (e.g., v_integer). Wrappers code readability (nested_tibble).","code":""},{"path":"https://visionlabels.github.io/jspsychread/news/index.html","id":"jspsychread-010","dir":"Changelog","previous_headings":"","what":"jspsychread 0.1.0","title":"jspsychread 0.1.0","text":"package transitioning new workflow (process_records).","code":""},{"path":"https://visionlabels.github.io/jspsychread/news/index.html","id":"jspsychread-0009000","dir":"Changelog","previous_headings":"","what":"jspsychread 0.0.0.9000","title":"jspsychread 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
